#!/bin/bash

APP_SVC_TOKEN="$SNAP_DATA/secrets/edgex-application-service/secrets-token.json"

# This connection can happen before or after security-secretstore-setup
# (a oneshot service that configures Vault) has already run. The first
# case happens when the content interface is auto-connected and the
# edgex-app-service-configurable snap is installed before the edgexfoundry
# snap. In this case there's action required.
#
# The latter happens when the order is swapped *and* the connection
# is manually connected. In this case since security-secretstore-setup
# (which runs file-token-provider) has already run, the token for
# app-service-cfg will have already been generated, and thus be hidden
# when the content interface directory from the app-service-configurable
# snap is bind mounted on top of the existing /secrets directory.
#
# So, this script is a big hammer which deletes the token and then
# restarts security-secretstore-setup to regenerate all the tokens,
# which results in the token being accessible from the asc snap.
#
# NOTE - one final comment, app-service-configurable is included in the
# edgexfoundry snap to provide for Kuiper integration. It's disabled by
# default, and is hard-code to use the 'rules-engine' profile. Due to
# the way vault tokens work, both the internal app-service-configurable
# instance, and the instance in the app-service-configurable snap are
# able to share the same token.
if [ ! -f "$APP_SVC_TOKEN" ]; then
    logger "edgex-secretstore-token: $APP_SVC_TOKEN doesn't exit; exiting..."
    exit 0
fi

logger "edgex-secretstore-token: $APP_SVC_TOKEN"
rm -f "$APP_SVC_TOKEN"

# Check for success of the rm operation as none of the standard
# test options (-f, -e, -r, -w) seem to work properly to test
# for existence of this file. This is probably due to permissions
# of the parent directory, but should be first validated before
# this comment is removed.
#
# Note - also tried was using 'rm <token>' and then checking the
# status. This also fails because only 'rm -f' seems to work to
# delete the file, and the status of the command is always 0,
# even if the file doesn't exist!
snapctl restart "$SNAP_NAME.security-secretstore-setup"

